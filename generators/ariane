#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 The SymbiFlow Authors.
#
# Use of this source code is governed by a ISC-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/ISC
#
# SPDX-License-Identifier: ISC

import sys
import os
from make_var import *

templ = """/*
:name: ariane
:description: Full ariane core test
:files: {0}
:incdirs: {1}
:defines: {2}
:tags: ariane
:results_group: cores
:top_module: {3}
:timeout: 360
*/
"""

try:
    third_party_dir = os.environ['THIRD_PARTY_DIR']
    tests_dir = os.environ['TESTS_DIR']
except KeyError:
    print("Export the THIRD_PARTY_DIR and TESTS_DIR variables first")
    sys.exit(1)

try:
    tests_subdir = sys.argv[1]
except IndexError:
    print("Usage: ./generator <subdir>")
    sys.exit(1)

ariane_path = os.path.abspath(os.path.join(third_party_dir, "cores", "ariane"))
main_path = os.path.abspath(os.getcwd())
os.chdir(ariane_path)

os.environ['RISCV'] = "./"
# retrieve only data defined in makefile
M = make_vars(origin=['makefile'])

try:
    ver_cmd = M['makefile']['verilate_command']
except:
    print("Ariane makefile was changed, unable to create source list")
    sys.exit(1)

ver_cmd_comp = ver_cmd.split()
incdirs = ''
defines = ''
sources = []


def process_filelist(filelist):
    global incdirs
    global defines
    global sources
    with open(filelist) as f:
        for l in f.readlines():
            l = l.strip()
            if l.startswith("//"):
                continue

            l = l.replace("${CVA6_REPO_DIR}", ariane_path)
            l = l.replace(
                "${HPDCACHE_DIR}",
                f"{ariane_path}/core/cache_subsystem/hpdcache")
            l = l.replace("${TARGET_CFG}", "cv64a6_imafdc_sv39")
            if l.startswith("+incdir+"):
                incdirs += l.partition("+incdir+")[2] + ' '
            elif l.startswith("+define+"):
                defines += l.partition("+define+")[2] + ' '
            elif l.startswith("-F"):
                # recursively parse filelists
                process_filelist(l.partition(' ')[2])
            elif l.endswith(".sv"):
                sources.append(l)


ver_cmd_comp_iter = iter(ver_cmd_comp)
while (components := next(ver_cmd_comp_iter, False)):
    args = components.strip()
    if args.startswith("+incdir+"):
        incdirs += os.path.join(
            ariane_path,
            args.partition("+incdir+")[2]) + ' '
    elif args.startswith("-f"):
        filelist = next(ver_cmd_comp_iter)
        process_filelist(os.path.join(ariane_path, filelist))
    elif args.startswith("--top-module"):
        top_module = next(ver_cmd_comp_iter)
    elif args.endswith('.sv'):
        # The Ariane file lists contains a reference to this file but the module itself
        # isn't instantiated anywhere. Problematically, it contains references to a
        # nonexistent interface, so it otherwise breaks elaboration. This hack can be
        # removed if the problem gets fixed upstream.
        if 'axi2apb_wrap.sv' not in args and args not in sources:
            sources.append(os.path.join(ariane_path, args))

os.chdir(main_path)
test_dir = os.path.join(tests_dir, 'generated', tests_subdir)

if not os.path.isdir(test_dir):
    os.makedirs(test_dir, exist_ok=True)

test_file = os.path.join(test_dir, "ariane.sv")

sources_str = " ".join(sources)
with open(test_file, "w") as f:
    f.write(templ.format(sources_str, incdirs, defines, top_module))
