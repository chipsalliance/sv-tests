#!/usr/bin/env python3

import sys
import os

templ = """/*
:name: ariane
:description: Full ariane core test
:files: {0}
:incdirs: {1}
:should_fail: 0
:tags: ariane
:top_module: ariane_testharness
:timeout: 180
*/
"""

try:
    third_party_dir = os.environ['THIRD_PARTY_DIR']
    tests_dir = os.environ['TESTS_DIR']
    conf_dir = os.environ['CONF_DIR']
except KeyError:
    print("Export the THIRD_PARTY_DIR, TESTS_DIR and CONF_DIR variables first")
    sys.exit(1)

try:
    tests_subdir = sys.argv[1]
except IndexError:
    print("Usage: ./generator <subdir>")
    sys.exit(1)

ariane_path = os.path.abspath(os.path.join(third_party_dir, "cores", "ariane"))
ariane_conf_path = os.path.abspath(
    os.path.join(conf_dir, "generators", "ariane"))

with open(os.path.join(ariane_conf_path, 'ar_pkg.src')) as f:
    pkg_files = f.read().split()

with open(os.path.join(ariane_conf_path, 'ar_src.src')) as f:
    src_files = f.read().split()

pkg_files += ['src/util/sram.sv']

incs = ['src/common_cells/include', 'src/axi_node']
sources = ''
incdirs = ''

for sv in pkg_files + src_files:
    sources += os.path.join(ariane_path, sv) + ' '

for inc in incs:
    incdirs += os.path.join(ariane_path, inc) + ' '

test_dir = os.path.join(tests_dir, 'generated', tests_subdir)

if not os.path.isdir(test_dir):
    os.makedirs(test_dir, exist_ok=True)

test_file = os.path.join(test_dir, "ariane.sv")

with open(test_file, "w") as f:
    f.write(templ.format(sources, incdirs))
