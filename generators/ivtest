#!/usr/bin/env python3

import re
import os
import sys
import glob

templ = """/*
:name: {0}
:description: Test imported from ivtest
:files: {1}
:incdirs: {4}
:tags: ivtest
{2}
{3}
{5}
*/
"""

try:
    third_party_dir = os.environ['THIRD_PARTY_DIR']
    tests_dir = os.environ['TESTS_DIR']
    conf_dir = os.environ['CONF_DIR']
except KeyError:
    print("Export the THIRD_PARTY_DIR, TESTS_DIR and CONF_DIR variables first")
    sys.exit(1)

try:
    tests_subdir = sys.argv[1]
except IndexError:
    print("Usage: ./generator <subdir>")
    sys.exit(1)

type_should_fail = ['CE', 'RE']

# FIXME: this all needs to be updated to properly load the ivtest *.list
#        files like is done with the ivtest driver along with the correct
#        override of the various tests.
ivtest_exclude = [
    'blif.list',  # Skip the BLIF test list
    'regress-ivl1.list',  # Skip the Icarus specific test list
    'regress-msys2.list',  # Skip the msys2 override test list
    'regress-v10.list',  # Skip the v10 override test list
    'regress-v11.list',  # Skip the v11 override test list
    'regress-vams.list',  # Skip the VAMS test list
    'regress-vhdl.list',  # Skip the VHDL test list
    'regress-vlog95.list',  # Skip the vlog95 override test list
    'vhdl_regress.list',  # Skip the VHDL side test list
    'vpi_regress.list'  # Skip the VPI test list
]

ivtest_blacklist = [
    'bool1',  # reg can't have type
    'br943_944_iv.sv',  # missing submodule
    'br974c',  # reg and logic is exclusive
    'br985_iv.sv',  # missing submodule
    'br988',  # generate_item can't have begin/end
    'br_gh72b',  # should_fail test
    'br_gh99c_iv.sv',  # vams only
    'ca_time_iv',  # IV only $simtime
    'case3',  # '@ *' is invalid event_control ( '@*' or '@ (*)' is valid )
    'cast_int_iv.sv',  # vams only
    'compare_bool_reg',  # reg can't have type
    'constfunc4_iv.sv',  # vams only
    'constfunc6_iv',  # IV only $abs, $min, $max
    'constfunc8',  # reg can't have type
    'deposit_iv',  # IV only $deposit
    'deposit_wire_iv',  # IV only $deposit
    'display_bug',  # [2] is invalid range
    'elsif_test',  # ifdef must have text_macro_identifier
    'enum_ports',  # reg can't have type
    'fileio',  # IV only $fopenr and $fopenw
    'fread',  # $fread from invalid variable (per wsnyder)
    'ivlh_textio_iv',  # IV only $ivlh_file_open
    'macro_str_esc',  # `` is invalid macro usage
    'macro_with_args',  # `` is invalid macro usage
    'memsynth3',  # bit is keyword
    'nonpolymorphicabs_iv',  # IV only AMS $abs
    'plus_arg_string_iv',  # IV only $finish_and_return
    'pr478',  # `protect is not valid directive
    'pr622',  # `` is invalid macro usage
    'pr639',  # `` is invalid macro usage
    'pr841_iv.sv',  # unresolved wires
    'pr1467825',  # `suppress_faults is not valid directive
    'pr1494799_iv',  # IV only $is_signed
    'pr1716276',  # empty parameter is invalid
    'pr1723367_iv.sv',  # scalar with vectored net
    'pr1787423',  # pulldown can't have multiple terminal
    'pr1787423b',  # pulldown can't have multiple terminal
    'pr1787423bv09',  # pulldown can't have multiple terminal
    'pr1861212a',  # reg can't have type
    'pr1861212c',  # reg can't have type
    'pr1877743',  # parallel_path_description can't have multiple input terminal
    'pr1912112',  # `` is invalid macro usage
    'pr1925360',  # `` is invalid macro usage
    'pr1978358',  # constant out of bound part select may be an error
    'pr1978358b',  # constant out of bound part select may be an error
    'pr1978358c',  # constant out of bound part select may be an error
    'pr1978358d',  # constant out of bound part select may be an error
    'pr2257003',  # generate_item can't have begin/end
    'pr2257003b',  # generate_item can't have begin/end
    'pr2509349a_iv',  # IV only $readmempath
    'pr2509349b_iv',  # IV only $readmempath
    'pr2790236',  # non-ANSI port can't have assignment
    'pr2834340',  # pulldown can't have multiple terminal
    'pr2834340b',  # pulldown can't have multiple terminal
    'pr3194155',  # parameter_value_assignment must have paren
    'pr3270320_iv',  # IV only $abs
    'pr3539372',  # empty initial
    'real8',  # reg can't have type
    'sel_rval_bit_ob',  # constant out of bound bit select may be an error
    'sf1289',  # foreach must have statement, not statement_or_null
    'simparam_iv',  # IV only $simparam
    'size_cast2',  # reg and logic is exclusive
    'specify_01',  # parallel_path_description can't have multiple input terminal
    'struct_packed_array',  # reg can't have type
    'sv2valnets',  # reg and bit is exclusive
    'sv_array_assign_pattern2',  # '{} is invalid
    'sv_cast_darrayv10_iv',  # IV only $ivl_darray_method
    'sv_casting',
    'sv_darray_args1',  # '{} is invalid
    'sv_darray_args2',  # '{} is invalid
    'sv_darray_args2b',  # '{} is invalid
    'sv_darray_args3',  # '{} is invalid
    'sv_darray_args4',  # '{} is invalid
    'sv_wildcard_import2',  # event_trigger can't have package_scope
    'sv_wildcard_import3',  # event_trigger can't have package_scope
    'swrite_iv',  # IV only $simtime
    'test_enumsystem_iv.sv',  # missing submodule
    'test_system_iv.sv',  # missing submodule
    'test_va_math',  # constants.vams is not found
    'test_vams_math_iv.sv',  # vams only
    'test_work14_iv.sv',  # missing submodule
    'undef',  # undefined macro behaviour is ambiguous
    'vams_abs1_iv.sv',  # vams only
    'warn_opt_sys_tf_iv',  # IV only $getpattern
    'wildsense',  # '@ *' is invalid event_control ( '@*' or '@ (*)' is valid )
    'z1',  # parameter_value_assignment must have paren
    'z2'  # parameter_value_assignment must have paren
]

ivtest_long = ['comp1000', 'comp1001']

ivtest_dir = os.path.abspath(os.path.join(third_party_dir, "tests", "ivtest"))
ivtest_exclude = set(
    map(lambda x: os.path.join(ivtest_dir, x), ivtest_exclude))
ivtest_lists = list(
    set(glob.glob(os.path.join(ivtest_dir, '*.list'))) - ivtest_exclude)

tests = []

skip = False

incdirs = [ivtest_dir, os.path.join(ivtest_dir, 'ivltests')]

for l in ivtest_lists:
    with open(l, 'r') as f:
        for line in f:
            if skip:
                skip = False
                continue

            # remove comments
            line = re.sub(r'#.*?\n', '', line)

            # skip multiline definitions
            if re.search(r'\\\n', line):
                skip = True
                continue

            line = line.split()

            if len(line) < 3:
                continue

            name = line[0]
            path = os.path.join(ivtest_dir, line[2], line[0] + '.v')
            should_fail_because = ''

            # sanitize name
            name = re.sub(r'\W', '', name)

            if name in ivtest_blacklist:
                continue
            if re.match("vhdl_", name):
                continue

            type_ = ''
            for t in type_should_fail:
                if re.match(t, line[1]):
                    should_fail_because = ':should_fail_because: this test was imported from ivtest and is designed to fail'
                    type_ = ':type: simulation'

            timeout = ''
            if name in ivtest_long:
                timeout = ':timeout: 30'

            tests.append(
                (
                    name + '_iv', path, should_fail_because, type_,
                    ' '.join(incdirs), timeout))

test_dir = os.path.join(tests_dir, 'generated', tests_subdir)

if not os.path.isdir(test_dir):
    os.makedirs(test_dir, exist_ok=True)

for test in tests:
    test_file = os.path.join(test_dir, test[0] + '.sv')
    with open(test_file, "w") as f:
        f.write(templ.format(*test))
