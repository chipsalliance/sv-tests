#!/usr/bin/env python3

import os
import re
import sys
import shutil
import logging
import argparse
import tempfile
import subprocess

parser = argparse.ArgumentParser()

parser.add_argument("-r", "--runner",
                    required=True)

parser.add_argument("-t", "--test",
                    required=True)

args = parser.parse_args()

# setup logger
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

ch = logging.StreamHandler()
ch.setFormatter(logging.Formatter('%(levelname)-8s| %(message)s'))
logger.addHandler(ch)


def parse_params(file_path, req_params):
    # look for all required params
    result = {}
    try:
        with open(file_path) as f:
            for l in f:
                param = re.search(r":([a-zA-Z_-]+):\s*(.+)", l)

                if param is None:
                    continue

                param_name = param.group(1).lower()
                param_value = param.group(2)

                if param_name not in req_params:
                    logger.warning("Unsupported param found: {} - ignoring"
                                   .format(param_name))
                    continue

                result[param_name] = param_value

                if len(set(req_params) - set(result.keys())) == 0:
                    # all parameters found
                    break

            else:
                missing = list(set(req_params) - set(result.keys()))
                logger.error("Required parameters missing ({}) in {}"
                             .format(", ".join(missing), file_path))
                sys.exit(1)
    except Exception as e:
        logger.error("Unable to parse test file: {}".format(str(e)))
        sys.exit(1)

    return result


dirs = {}

try:
    dirs['out'] = os.environ['OUT_DIR']
    dirs['tests'] = os.environ['TESTS_DIR']
    dirs['runners'] = os.environ['RUNNERS_DIR']
except KeyError as e:
    logger.error("Required environment variables missing: {}".format(str(e)))
    sys.exit(1)

runner = os.path.abspath(os.path.join(dirs['runners'], args.runner))
test = os.path.abspath(os.path.join(dirs['tests'], args.test))
out = os.path.abspath(os.path.join(dirs['out'],
                      args.runner,
                      args.test + ".log"))

req_test_params = ["name", "tags", "description", "should_fail", "steps"]
req_runner_params = ["type"]

test_params = parse_params(test, req_test_params)
runner_params = parse_params(runner, req_runner_params)

if runner_params["type"] not in test_params["steps"].split():
    logger.debug("Skipping {}/{}, step {}"
                 .format(args.runner, args.test, runner_params["type"]))

    sys.exit(0)

try:
    tmp_dir = tempfile.mkdtemp()
except (PermissionError, FileExistsError) as e:
    logger.error("Unable to create a temporary directory for test: {}"
                 .format(str(e)))
    sys.exit(1)

try:
    logger.info("Running {}/{}"
                .format(args.runner, args.test))

    proc = subprocess.Popen([runner, test], cwd=tmp_dir,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT)

    output, _ = proc.communicate()

    test_params['rc'] = proc.returncode

    tool_should_fail = test_params["should_fail"] == "1"
    tool_failed = test_params["rc"] != "0"

    test_passed = tool_should_fail == tool_failed

    if test_passed:
        logger.info("PASS: {}/{}".format(args.runner, args.test))
    else:
        logger.warning("FAIL: {}/{}".format(args.runner, args.test))

    with open(out, "w") as log:
        # start by writing params
        for p in test_params:
            log.write("{}: {}\n".format(p, test_params[p]))
        log.write("\n")
        log.write(output.decode('utf-8'))
except Exception as e:
    logger.error("Unable to test {} using {}: {}"
                 .format(args.runner, args.test, str(e)))
    sys.exit(1)
finally:
    shutil.rmtree(tmp_dir)
